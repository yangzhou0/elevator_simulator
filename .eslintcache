[{"/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/index.js":"1","/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/App.js":"2","/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/reportWebVitals.js":"3","/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/helper/utilityFunctions.js":"4"},{"size":500,"mtime":1611074345691,"results":"5","hashOfConfig":"6"},{"size":2817,"mtime":1611090175586,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611074345693,"results":"8","hashOfConfig":"6"},{"size":1559,"mtime":1611249916589,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"10gaph0",{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/index.js",[],["20","21"],"/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/App.js",["22","23","24","25"],"import logo from './logo.svg';\nimport './App.css';\nimport {useEffect,useState} from 'react'\nimport {getRandomIntInclusive,addFloor,isGoingUp,checkFloorStatus} from \"./helper/utilityFunctions\"\n\nfunction App() {\n  // initialize a random floow between 1 and 10\n  const maxFloor = 20\n  const [currentFloor,setCurrentFloor] = useState(getRandomIntInclusive(1,maxFloor))\n  const [floorsToGo,setFloorsToGo] = useState([])\n  const [closeDoor,setCloseDoor] = useState(false)\n  const [goingUp,setGoingUp] = useState(true)\n  const [message,setMessage] = useState('')\n\n  //initialize 10 floors\n  const floors = Array(maxFloor).fill(null).map((_, i) => i+1);\n  const selectFloor = (e,deselect)=>{\n    let selectedFloor = Number(e.target.value)\n    addFloor(currentFloor,floorsToGo,selectedFloor,setFloorsToGo,deselect)\n    setCloseDoor(true)\n    console.log('floors to go',floorsToGo)\n  }\n\n  useEffect(() => {\n    //set time interval for elevator to move\n    let interval;\n    if (closeDoor && floorsToGo.length != 0 ){\n      isGoingUp(currentFloor,floorsToGo)? setGoingUp(true) : setGoingUp(false)\n      setMessage(`moving ${goingUp? 'up' : 'down'}`)\n      interval = setInterval(() => {\n        setCurrentFloor(goingUp? currentFloor+1 : currentFloor-1)\n      }, 1000);\n\n      //check what floor it is on and the corresponding status\n      let floorStatus = checkFloorStatus(currentFloor,floorsToGo,setFloorsToGo)\n      switch (floorStatus) {\n        case 'arrived':\n          setCloseDoor(false)\n          let userInput = prompt(`You have arrived at floor ${currentFloor} would you like to go out? y/n`)\n          setMessage('door closing in 3 seconds')\n          setTimeout(() => {\n            setMessage('door closed')\n            setCloseDoor(true)\n          }, 3000);\n          break;\n        case 'stop':\n          setCloseDoor(false)\n          return\n      }\n      \n    }\n    else{\n      clearInterval(interval);\n    }\n\n\n    return () => clearInterval(interval);\n  }, [floorsToGo,closeDoor,currentFloor,goingUp,message]);\n\n\n  return (\n    <div className=\"App\">\n      <h2>Current floor: {currentFloor}</h2>\n      <h2>Floors to go:</h2> \n      {floorsToGo && floorsToGo.map((floorToGo)=>(\n        <button key = {floorToGo} onClick={e=>selectFloor(e,true)} value ={floorToGo}>{floorToGo}</button>\n      ))}\n      <h2>Elevator status: {message}</h2>\n      <div>\n        <span>Select a floor to go: </span>\n        {floors.map((floor)=>(\n          <button key = {floor} onClick={e => selectFloor(e,false)} value ={floor}>{floor}</button>\n        ))}\n      </div>\n      <br></br>\n      <button onClick={(e)=>{setMessage('open door'); setCloseDoor(false)}}>open elevator door</button>\n      <button onClick={(e)=>{setMessage('close door'); setCloseDoor(true)}}>close elevator door</button>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/reportWebVitals.js",[],"/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/helper/utilityFunctions.js",["26","27","28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":1,"column":8,"nodeType":"36","messageId":"37","endLine":1,"endColumn":12},{"ruleId":"38","severity":1,"message":"39","line":27,"column":40,"nodeType":"40","messageId":"41","endLine":27,"endColumn":42},{"ruleId":"42","severity":1,"message":"43","line":36,"column":7,"nodeType":"44","messageId":"45","endLine":49,"endColumn":8},{"ruleId":"34","severity":1,"message":"46","line":39,"column":15,"nodeType":"36","messageId":"37","endLine":39,"endColumn":24},{"ruleId":"38","severity":1,"message":"39","line":10,"column":45,"nodeType":"40","messageId":"41","endLine":10,"endColumn":47},{"ruleId":"38","severity":1,"message":"47","line":13,"column":22,"nodeType":"40","messageId":"41","endLine":13,"endColumn":24},{"ruleId":"38","severity":1,"message":"39","line":44,"column":45,"nodeType":"40","messageId":"41","endLine":44,"endColumn":47},{"ruleId":"38","severity":1,"message":"47","line":47,"column":30,"nodeType":"40","messageId":"41","endLine":47,"endColumn":32},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'userInput' is assigned a value but never used.","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]