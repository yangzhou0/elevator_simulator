[{"/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/index.js":"1","/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/App.js":"2","/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/reportWebVitals.js":"3","/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/helper/utilityFunctions.js":"4"},{"size":500,"mtime":1611074345691,"results":"5","hashOfConfig":"6"},{"size":2103,"mtime":1611082793567,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611074345693,"results":"8","hashOfConfig":"6"},{"size":859,"mtime":1611082492875,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"10gaph0",{"filePath":"13","messages":"14","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/index.js",[],["20","21"],"/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/App.js",["22","23","24","25","26","27"],"/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/reportWebVitals.js",[],"/Users/yangzhou/Desktop/codePlatoonExercises/elevator_simulator/src/helper/utilityFunctions.js",["28","29"],"function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\n\nconst addFloor = (floorsToGo,selectedFloor,setFloorsToGo)=>{\n  if (!floorsToGo.includes(selectedFloor)){\n    floorsToGo.push(selectedFloor)\n    console.log('new floors to go',floorsToGo)\n    setFloorsToGo(floorsToGo)\n  }\n}\n\nconst isGoingUp = (currentFloor,floorsToGo)=>{\n  if (floorsToGo[0] > currentFloor){\n    return true\n  }else if (floorsToGo[0] < currentFloor){\n    return false\n  }\n}\n\nconst checkFloorStatus = (currentFloor,floorsToGo)=>{\n  if (currentFloor == floorsToGo[0]){\n    return 'arrived'\n  }\n  else if (floorsToGo.length == 0){\n    return 'stop'\n  }\n}\n\nexport {\n  getRandomIntInclusive,\n  addFloor,\n  isGoingUp,\n  checkFloorStatus\n}",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":1,"column":8,"nodeType":"36","messageId":"37","endLine":1,"endColumn":12},{"ruleId":"34","severity":1,"message":"38","line":4,"column":9,"nodeType":"36","messageId":"37","endLine":4,"endColumn":30},{"ruleId":"39","severity":1,"message":"40","line":23,"column":5,"nodeType":"41","messageId":"42","endLine":37,"endColumn":6},{"ruleId":"43","severity":1,"message":"44","line":29,"column":22,"nodeType":"45","messageId":"46","endLine":29,"endColumn":24},{"ruleId":"43","severity":1,"message":"47","line":41,"column":40,"nodeType":"45","messageId":"46","endLine":41,"endColumn":42},{"ruleId":"48","severity":1,"message":"49","line":51,"column":6,"nodeType":"50","endLine":51,"endColumn":38,"suggestions":"51"},{"ruleId":"43","severity":1,"message":"44","line":24,"column":20,"nodeType":"45","messageId":"46","endLine":24,"endColumn":22},{"ruleId":"43","severity":1,"message":"44","line":27,"column":30,"nodeType":"45","messageId":"46","endLine":27,"endColumn":32},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'getRandomIntInclusive' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'floorsToGo'. Either include it or remove the dependency array. You can also do a functional update 'setFloorsToGo(f => ...)' if you only need 'floorsToGo' in the 'setFloorsToGo' call.","ArrayExpression",["54"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [closeDoor, currentFloor, floorsToGo, goingUp]",{"range":"57","text":"58"},[1664,1696],"[closeDoor, currentFloor, floorsToGo, goingUp]"]